plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
	id 'com.jfrog.bintray' version '1.8.5'
	id 'com.modrinth.minotaur' version '1.1.0'
}

import com.modrinth.minotaur.TaskModrinthUpload

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name

boolean ghBuild = System.getenv('GITHUB_WORKFLOW') == "Java CI with Gradle"
version = !ghBuild ? project.mod_version : "${project.mod_version}+build.${System.getenv('GITHUB_RUN_NUMBER')}"
group = project.maven_group

repositories {
	maven {
		name 'JitPack'
		url 'https://jitpack.io'
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// ModMenu
	modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"

	// Sodium
	modImplementation "com.github.jellysquid3:sodium-fabric:mc${project.sodium_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

task modrinth (type: TaskModrinthUpload, dependsOn: build) {
	token = project.hasProperty('modrinthToken') ? project.property('modrinthToken') : System.getenv('MODRINTH_TOKEN')
	projectId = '1E2sq1cp'
	versionNumber = project.version
	uploadFile = remapJar
	addGameVersion('1.16')
	addGameVersion('1.16.1')
	addGameVersion('1.16.2')
	addGameVersion('1.16.3')
	addGameVersion('1.16.4')
	addLoader('fabric')

	FileTree files = fileTree(dir: './build/libs')
	files.each {f ->
		if (f.name != "${archivesBaseName}-${version}.jar") { // don't upload the remapJar file again
			addFile(f)
		}
	}
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')
	publications = ["mavenJava"]
	publish = true
	pkg {
		repo = 'maven'
		name = 'VTDownloader'
		licenses = ['MIT']
		vcsUrl = 'https://github.com/ByMartrixx/VTDownloader.git'
		version {
			released = new Date()
			githubRepo = 'ByMartrixx/VTDownloader'
			websiteUrl = 'https://github.com/ByMartrixx/VTDownloader'
			issueTrackerUrl = 'https://github.com/ByMartrixx/VTDownloader/issues'
			vcsUrl = 'https://github.com/ByMartrixx/VTDownloader.git'
			gpg {
				sign = true
			}
		}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			pom.withXml {
				def root = asNode()
				root.appendNode('description', 'VTDownloader')
				root.appendNode('name', 'VTDownloader')
				root.appendNode('url', 'https://github.com/ByMartrixx/VTDownloader')
			}
			groupId("${project.maven_group}")
			artifactId 'VTDownloader'
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

