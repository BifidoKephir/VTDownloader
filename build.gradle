plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
	id 'com.jfrog.bintray' version '1.8.5'
	id 'com.modrinth.minotaur' version '1.1.0'
}

import com.modrinth.minotaur.TaskModrinthUpload

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
group = project.maven_group

boolean isBuild = System.getenv('GITHUB_WORKFLOW') == 'build'
version = !isBuild ? project.mod_version : "${project.mod_version}+build.${System.getenv('GITHUB_RUN_NUMBER')}"

repositories {
	maven {
		name 'JitPack'
		url 'https://jitpack.io'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// ModMenu
	modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"

	// Sodium
	modImplementation "com.github.jellysquid3:sodium-fabric:mc${project.sodium_version}"

	// BedrockIfy for #2
	modImplementation "com.github.juancarloscp52:BedrockIfy:c837234"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

task modrinth (type: TaskModrinthUpload, dependsOn: build) {
	token = project.hasProperty('modrinth_token') ? project.property('modrinth_token') : System.getenv('MODRINTH_TOKEN')
	projectId = '1E2sq1cp'
	versionNumber = project.version
	uploadFile = remapJar
	addGameVersion('1.16')
	addGameVersion('1.16.1')
	addGameVersion('1.16.2')
	addGameVersion('1.16.3')
	addGameVersion('1.16.4')
	addLoader('fabric')

	FileTree files = fileTree(dir: './build/libs/')
	files.each {f ->
		if (f.name != "${archivesBaseName}-${version}.jar") { // don't upload the remapJar file again
			addFile(f)
		}
	}
}

bintray {
	user = project.hasProperty('bintray_user') ? project.property('bintray_user') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintray_key') ? project.property('bintray_key') : System.getenv('BINTRAY_KEY')
	publications = ['mavenJava']
	publish = true
	pkg {
		repo = 'maven'
		name = 'VTDownloader'
		licenses = ['MIT']
		vcsUrl = 'https://github.com/ByMartrixx/VTDownloader.git'
		version {
			released = new Date()
			githubRepo = 'ByMartrixx/VTDownloader'
			websiteUrl = 'https://github.com/ByMartrixx/VTDownloader'
			issueTrackerUrl = 'https://github.com/ByMartrixx/VTDownloader/issues'
			vcsUrl = 'https://github.com/ByMartrixx/VTDownloader.git'
			gpg {
				sign = true
			}
		}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}

			pom.withXml {
				def root = asNode()
				root.appendNode('description', 'VTDownloader')
				root.appendNode('name', 'VTDownloader')
				root.appendNode('url', 'https://github.com/ByMartrixx/VTDownloader')
			}
			groupId("${group}")
			artifactId 'VTDownloader'
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	}
}
