plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id 'com.modrinth.minotaur' version '2.2.0'
	id 'org.quiltmc.quilt-mappings-on-loom' version '4.2.0'
	id 'io.github.juuxel.loom-quiltflower' version '1.7.2'
}

import com.modrinth.minotaur.TaskModrinthUpload

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
group = project.maven_group

version = project.mod_version + '+' + project.minecraft_version
boolean isBuild = System.getenv('GITHUB_WORKFLOW') == 'build'
version = !isBuild ? version : "${version}+build.${System.getenv('GITHUB_RUN_NUMBER')}"

repositories {
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/release'
	}
	maven {
		name = 'Quilt Snapshots'
		url = 'https://maven.quiltmc.org/repository/snapshot'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(loom.layered {
		addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings_build}:v2"))
	})
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

quiltflower {
	addToRuntimeClasspath.set(true)
}

modrinth {
	token = project.hasProperty('modrinth_token') ? project.property('modrinth_token') : System.getenv('MODRINTH_TOKEN')
	projectId = '1E2sq1cp'
	versionNumber = project.version
	versionName = "VTDownloader ${project.mod_version} for Minecraft 1.19"
	uploadFile = remapJar
	changelog = "A changelog can be found at https://github.com/ByMartrixx/VTDownloader/releases/tag/${project.mod_version}"
	gameVersions = ['1.19-pre3']
	loaders = ['fabric', 'quilt']
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
		maven {
			url 's3://maven.bymartrixx.me'
			credentials(AwsCredentials) {
				accessKey = System.env.AWS_ACCESS_KEY ?: findProperty('mavenAccessKey')
				secretKey = System.env.AWS_SECRET_KEY ?: findProperty('mavenSecretKey')
			}
		}
	}
}
